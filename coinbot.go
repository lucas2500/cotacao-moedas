package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
)

type AutoGenerated struct {
	USD struct {
		Code       string `json:"code"`
		Codein     string `json:"codein"`
		Name       string `json:"name"`
		High       string `json:"high"`
		Low        string `json:"low"`
		VarBid     string `json:"varBid"`
		PctChange  string `json:"pctChange"`
		Bid        string `json:"bid"`
		Ask        string `json:"ask"`
		Timestamp  string `json:"timestamp"`
		CreateDate string `json:"create_date"`
	} `json:"USD"`
	BTC struct {
		Code       string `json:"code"`
		Codein     string `json:"codein"`
		Name       string `json:"name"`
		High       string `json:"high"`
		Low        string `json:"low"`
		VarBid     string `json:"varBid"`
		PctChange  string `json:"pctChange"`
		Bid        string `json:"bid"`
		Ask        string `json:"ask"`
		Timestamp  string `json:"timestamp"`
		CreateDate string `json:"create_date"`
	} `json:"BTC"`
}

func main() {

	request, _ := http.Get("https://economia.awesomeapi.com.br/all/USD-BRL,BTC-BRL")

	if request.StatusCode != 200 {

		fmt.Println("Houve um erro ao requisitar a API!!")

	} else {

		body, _ := ioutil.ReadAll(request.Body)

		var result AutoGenerated

		err := json.Unmarshal([]byte(body), &result)

		if err != nil {
			fmt.Println("Erro: ", err)
		}

		dolar := [3]string{result.USD.Bid, result.USD.High, result.USD.Low}
		btc := [3]string{result.BTC.Bid, result.BTC.High, result.BTC.Low}

		SendMsg(dolar, btc)
	}

}

func SendMsg(dolar [3]string, btc [3]string) {

	// Id do bot
	BotToken := ""
	// Id do chat
	ChatId := ""

	CurDolVal, _ := strconv.ParseFloat(dolar[0], 64)
	HigDolVal, _ := strconv.ParseFloat(dolar[1], 64)
	LowDolVal, _ := strconv.ParseFloat(dolar[2], 64)

	CurBitVal, _ := strconv.ParseFloat(btc[0], 64)
	HigBitVal, _ := strconv.ParseFloat(btc[1], 64)
	LowBitVal, _ := strconv.ParseFloat(btc[2], 64)

	msg := "<b>Cotação atual do Dólar e Bitcoin:</b>"
	msg += "%0A"
	msg += "%0A"
	msg += "<b>Dólar (valor atual):</b> R$ " + fmt.Sprintf("%.2f", CurDolVal)
	msg += "%0A"
	msg += "<b>Dólar (maior valor):</b> R$ " + fmt.Sprintf("%.2f", HigDolVal)
	msg += "%0A"
	msg += "<b>Dólar (menor valor):</b> R$ " + fmt.Sprintf("%.2f", LowDolVal)

	msg += "%0A"
	msg += "%0A"

	msg += "<b>Bitcoin (valor atual):</b> R$ " + fmt.Sprintf("%.2f", CurBitVal)
	msg += "%0A"
	msg += "<b>Bitcoin (maior valor):</b> R$ " + fmt.Sprintf("%.2f", HigBitVal)
	msg += "%0A"
	msg += "<b>Bitcoin (menor valor):</b> R$ " + fmt.Sprintf("%.2f", LowBitVal)

	telrequest, _ := http.Get("https://api.telegram.org/bot" + BotToken + "/sendMessage?chat_id=" + ChatId + "&text=" + msg + "&parse_mode=html")

	if telrequest.StatusCode == 200 {
		fmt.Println("Notificação enviada com sucesso!!")
	} else {
		fmt.Println("Houve um erro ao enviar a notificação!! o status HTTP foi:", telrequest.StatusCode)
		body, _ := ioutil.ReadAll(telrequest.Body)

		fmt.Println(string(body))
	}

}
